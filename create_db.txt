-- Table: public.password_resets

-- DROP TABLE IF EXISTS public.password_resets;

CREATE TABLE IF NOT EXISTS public.password_resets
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    token_hash text COLLATE pg_catalog."default" NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    used boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT password_resets_pkey PRIMARY KEY (id),
    CONSTRAINT password_resets_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.password_resets
    OWNER to appuser;
-- Index: idx_password_resets_expires

-- DROP INDEX IF EXISTS public.idx_password_resets_expires;

CREATE INDEX IF NOT EXISTS idx_password_resets_expires
    ON public.password_resets USING btree
    (expires_at ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_password_resets_token_hash

-- DROP INDEX IF EXISTS public.idx_password_resets_token_hash;

CREATE INDEX IF NOT EXISTS idx_password_resets_token_hash
    ON public.password_resets USING btree
    (token_hash COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_password_resets_user

-- DROP INDEX IF EXISTS public.idx_password_resets_user;

CREATE INDEX IF NOT EXISTS idx_password_resets_user
    ON public.password_resets USING btree
    (user_id ASC NULLS LAST)
    TABLESPACE pg_default;

//----------------------------------------

-- Table: public.users

-- DROP TABLE IF EXISTS public.users;

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    email citext COLLATE pg_catalog."default" NOT NULL,
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    role user_role NOT NULL DEFAULT 'user'::user_role,
    is_active boolean NOT NULL DEFAULT true,
    last_login timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to appuser;

-- Trigger: trg_users_updated_at

-- DROP TRIGGER IF EXISTS trg_users_updated_at ON public.users;

CREATE OR REPLACE TRIGGER trg_users_updated_at
    BEFORE UPDATE 
    ON public.users
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();